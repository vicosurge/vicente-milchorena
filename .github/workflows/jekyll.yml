# This workflow builds and deploys a Jekyll site to GitHub Pages and generates a PDF version
name: Deploy Jekyll site to Pages with PDF

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write  # Changed from 'read' to 'write' to allow PDF commits
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@4a9ddd6f338a97768b8006bf671dfbad383215f4
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0
          
      - name: Configure Bundler for GitHub Actions
        run: |
          bundle config set --local deployment false
          bundle config set --local path vendor/bundle
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        
      - name: Build with Jekyll
        run: |
          bundle install
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js for PDF generation
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Puppeteer
        run: npm install puppeteer
        
      - name: Create PDF generation script
        run: |
          cat > generate-pdf.js << 'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');
          
          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const page = await browser.newPage();
            
            // Load the built Jekyll site
            const htmlPath = path.join(process.cwd(), '_site/index.html');
            const htmlContent = fs.readFileSync(htmlPath, 'utf8');
            
            // Create PDF-specific styles
            const pdfStyles = `
              <style>
                body { font-family: "Times New Roman", serif; line-height: 1.4; color: #000; font-size: 11pt; }
                .pdf-download { display: none !important; }
                img { display: none !important; }
                .cv-container { max-width: none; margin: 0; padding: 0; box-shadow: none; }
                
                h1 { font-size: 20pt; font-weight: bold; text-align: center; margin-bottom: 12pt; page-break-after: avoid; }
                h2 { font-size: 14pt; font-weight: bold; margin-top: 18pt; margin-bottom: 10pt; padding-bottom: 4pt; border-bottom: 1pt solid #000; page-break-after: avoid; }
                h2::after { display: none; }
                
                .contact-info { text-align: center; margin-bottom: 18pt; font-size: 10pt; color: #333; }
                .contact-info p { margin-bottom: 2pt; }
                
                .job-entry { margin-bottom: 16pt; padding: 0; background: white; border: none; page-break-inside: avoid; }
                .job-title { font-size: 12pt; font-weight: bold; display: inline; margin-right: 8pt; }
                .job-company { font-size: 12pt; font-weight: bold; display: inline; }
                .job-duration { font-size: 11pt; color: #666; font-style: italic; float: right; }
                .job-description { clear: both; color: #333; margin: 8pt 0; text-align: justify; }
                .job-description strong { display: block; margin-top: 6pt; margin-bottom: 3pt; color: #000; }
                
                .job-entry ul { margin: 6pt 0 8pt 18pt; }
                .job-entry li { margin-bottom: 3pt; color: #333; line-height: 1.4; }
                
                .skill-category { margin-bottom: 6pt; }
                .skill-label { font-weight: bold; display: inline; margin-right: 4pt; }
                .skill-tags { display: inline; }
                .skill-tag { background: none; color: #333; padding: 0; border: none; font-size: 11pt; }
                .skill-tag:not(:last-child)::after { content: ', '; }
                
                ul { margin-left: 18pt; margin-bottom: 8pt; }
                li { margin-bottom: 3pt; color: #333; }
                a { color: #000; text-decoration: none; }
                hr { border: none; border-top: 1pt solid #000; margin: 14pt 0; }
                
                .no-break { page-break-inside: avoid; }
              </style>
            `;
            
            // Remove images and add PDF-specific styles
            let pdfHtml = htmlContent.replace(/<img[^>]*>/gi, ''); // Remove all img tags
            pdfHtml = pdfHtml.replace('</head>', pdfStyles + '</head>');
            
            await page.setContent(pdfHtml, { waitUntil: 'networkidle0' });
            
            await page.pdf({
              path: '_site/vicente-munoz-cv.pdf',
              format: 'A4',
              margin: {
                top: '1in',
                right: '0.75in',
                bottom: '1in',
                left: '0.75in'
              },
              printBackground: true,
              preferCSSPageSize: true
            });
            
            await browser.close();
            console.log('PDF generated successfully at _site/vicente-munoz-cv.pdf');
          })();
          EOF
          
      - name: Generate PDF
        run: node generate-pdf.js
          
      - name: Upload artifact (including PDF)
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
